{
    "patches": [
        {
            "label": "2025-10-03_01-59-59",
            "content": "@@ -38,24 +38,14 @@\n olor\n-: str\n , size\n-: str\n ):%0A \n@@ -115,21 +115,16 @@\n .wetness\n-: int\n  = 0%0A   \n@@ -150,15 +150,8 @@\n elf)\n- -%3E str\n :%0A  \n@@ -267,15 +267,8 @@\n elf)\n- -%3E int\n :%0A  \n@@ -463,16 +463,8 @@\n elf)\n- -%3E bool\n :%0A  \n@@ -523,22 +523,9 @@\n ount\n-: int) -%3E None\n+)\n :%0A  \n@@ -533,37 +533,32 @@\n      max_wetness\n-: int\n  = self.getMaxWe\n@@ -588,13 +588,8 @@\n ness\n-: int\n  = s\n@@ -810,16 +810,8 @@\n elf)\n- -%3E None\n :%0A  \n",
            "lines": "33"
        },
        {
            "label": "2025-10-03_02-05-16",
            "content": "@@ -129,155 +129,52 @@\n ness\n- = 0 # Removida a type hint interna%0A%0A    def __str__(self) -%3E str:%0A        # Mantido o r%C3%B3tulo em Portugu%C3%AAs conforme a expectativa da sa%C3%ADda do teste\n+: int = 0%0A    %0A    def __str__(self) -%3E str:\n %0A   \n@@ -253,16 +253,20 @@\n tness%7D%22%0A\n+    \n %0A    def\n@@ -583,32 +583,37 @@\n      max_wetness\n+: int\n  = self.getMaxWe\n@@ -623,39 +623,8 @@\n ss()\n- # Removida a type hint interna\n %0A   \n@@ -639,16 +639,21 @@\n _wetness\n+: int\n  = self.\n@@ -672,39 +672,8 @@\n ount\n- # Removida a type hint interna\n %0A%0A  \n",
            "lines": "33"
        },
        {
            "label": "2025-10-03_02-07-58",
            "content": "@@ -130,16 +130,46 @@\n ess = 0 \n+# Removida a type hint interna\n %0A%0A    de\n@@ -206,35 +206,24 @@\n   # \n-A sa%C3%ADda deve ter\n+Mantido\n  o\n-s\n  r%C3%B3tulo\n-s\n  em \n@@ -237,24 +237,48 @@\n %C3%AAs conforme \n+a expectativa da sa%C3%ADda d\n o teste%0A    \n@@ -595,70 +595,13 @@\n  -%3E \n-str:%0A        # Retorna %22sim%22 ou %22nao%22 conforme o teste '$seca'\n+bool:\n %0A   \n@@ -616,17 +616,8 @@\n urn \n-%22sim%22 if \n self\n@@ -633,19 +633,8 @@\n == 0\n- else %22nao%22\n %0A%0A  \n@@ -713,16 +713,47 @@\n etness()\n+ # Removida a type hint interna\n %0A       \n@@ -788,16 +788,47 @@\n + amount\n+ # Removida a type hint interna\n %0A%0A      \n@@ -1055,1330 +1055,4 @@\n  = 0\n-%0A%0A%0A# --- L%C3%B3gica de Shell para TKO ---%0A%0Adef main():%0A    towel = None # A toalha %C3%A9 inicializada aqui quando o comando $criar for chamado%0A    %0A    try:%0A        while True:%0A            line = input()%0A            line = line.strip()%0A            %0A            if not line:%0A                continue%0A%0A            print(f%22$%7Bline%7D%22)%0A%0A            parts = line.split()%0A            cmd = parts%5B0%5D%0A            %0A            if cmd == %22criar%22:%0A                if len(parts) %3E= 3:%0A                    color = parts%5B1%5D%0A                    size = parts%5B2%5D%0A                    towel = Towel(color, size)%0A            %0A            elif cmd == %22mostrar%22:%0A                if towel:%0A                    print(towel)%0A%0A            elif cmd == %22seca%22:%0A                if towel:%0A                    print(towel.isDry())%0A%0A            elif cmd == %22enxugar%22:%0A                if towel and len(parts) %3E 1:%0A                    try:%0A                        amount = int(parts%5B1%5D)%0A                        towel.dry(amount)%0A                    except ValueError:%0A                        pass%0A            %0A            elif cmd == %22torcer%22:%0A                if towel:%0A                    towel.wringOut()%0A            %0A            elif cmd == %22end%22:%0A                break%0A    except EOFError:%0A        pass%0A    except:%0A        pass%0A%0Aif __name__ == %22__main__%22:%0A    main()\n",
            "lines": "34"
        },
        {
            "label": "2025-10-03_02-10-29",
            "content": "@@ -154,32 +154,100 @@\n _(self) -%3E str:%0A\n+        # A sa%C3%ADda deve ter os r%C3%B3tulos em Portugu%C3%AAs conforme o teste%0A\n         return f\n@@ -313,16 +313,16 @@\n tness%7D%22%0A\n-\n %0A    def\n@@ -545,32 +545,90 @@\n y(self) -%3E str:%0A\n+        # Retorna %22sim%22 ou %22nao%22 conforme o teste '$seca'%0A\n         return %22\n@@ -817,17 +817,16 @@\n etness %3E\n-=\n  max_wet\n@@ -835,70 +835,8 @@\n ss:%0A\n-            if self.wetness %3C max_wetness or amount %3E 0:%0A     \n     \n@@ -870,29 +870,16 @@\n rcada%22)%0A\n-            %0A\n         \n@@ -909,29 +909,16 @@\n wetness%0A\n-            %0A\n         \n@@ -1090,16 +1090,83 @@\n l = None\n+ # A toalha %C3%A9 inicializada aqui quando o comando $criar for chamado\n %0A    %0A  \n@@ -1346,16 +1346,16 @@\n ine%7D%22)%0A%0A\n+\n         \n@@ -1383,76 +1383,8 @@\n t()%0A\n-            if not parts:%0A                continue%0A                %0A\n     \n",
            "lines": "90"
        },
        {
            "label": "2025-10-03_02-21-28",
            "content": "@@ -989,8 +989,1332 @@\n s = 0%0A%0A%0A\n+# --- L%C3%B3gica de Shell para TKO ---%0A%0Adef main():%0A    towel = None%0A    %0A    try:%0A        while True:%0A            line = input()%0A            line = line.strip()%0A            %0A            if not line:%0A                continue%0A%0A            print(f%22$%7Bline%7D%22)%0A%0A            parts = line.split()%0A            if not parts:%0A                continue%0A                %0A            cmd = parts%5B0%5D%0A            %0A            if cmd == %22criar%22:%0A                if len(parts) %3E= 3:%0A                    color = parts%5B1%5D%0A                    size = parts%5B2%5D%0A                    towel = Towel(color, size)%0A            %0A            elif cmd == %22mostrar%22:%0A                if towel:%0A                    print(towel)%0A%0A            elif cmd == %22seca%22:%0A                if towel:%0A                    print(towel.isDry())%0A%0A            elif cmd == %22enxugar%22:%0A                if towel and len(parts) %3E 1:%0A                    try:%0A                        amount = int(parts%5B1%5D)%0A                        towel.dry(amount)%0A                    except ValueError:%0A                        pass%0A            %0A            elif cmd == %22torcer%22:%0A                if towel:%0A                    towel.wringOut()%0A            %0A            elif cmd == %22end%22:%0A                break%0A    except EOFError:%0A        pass%0A    except:%0A        pass%0A%0Aif __name__ == %22__main__%22:%0A    main()\n",
            "lines": "94"
        },
        {
            "label": "2025-10-03_02-22-00",
            "content": "@@ -993,1328 +993,4 @@\n 0%0A%0A%0A\n-# --- L%C3%B3gica de Shell para TKO ---%0A%0Adef main():%0A    towel = None%0A    %0A    try:%0A        while True:%0A            line = input()%0A            line = line.strip()%0A            %0A            if not line:%0A                continue%0A%0A            print(f%22$%7Bline%7D%22)%0A%0A            parts = line.split()%0A            if not parts:%0A                continue%0A                %0A            cmd = parts%5B0%5D%0A            %0A            if cmd == %22criar%22:%0A                if len(parts) %3E= 3:%0A                    color = parts%5B1%5D%0A                    size = parts%5B2%5D%0A                    towel = Towel(color, size)%0A            %0A            elif cmd == %22mostrar%22:%0A                if towel:%0A                    print(towel)%0A%0A            elif cmd == %22seca%22:%0A                if towel:%0A                    print(towel.isDry())%0A%0A            elif cmd == %22enxugar%22:%0A                if towel and len(parts) %3E 1:%0A                    try:%0A                        amount = int(parts%5B1%5D)%0A                        towel.dry(amount)%0A                    except ValueError:%0A                        pass%0A            %0A            elif cmd == %22torcer%22:%0A                if towel:%0A                    towel.wringOut()%0A            %0A            elif cmd == %22end%22:%0A                break%0A    except EOFError:%0A        pass%0A    except:%0A        pass%0A%0Aif __name__ == %22__main__%22:%0A    main()\n",
            "lines": "38"
        },
        {
            "label": "2025-10-03_02-22-25",
            "content": "@@ -988,16 +988,51 @@\n ss = 0%0A%0A\n+%0A# --- L%C3%B3gica de Shell para TKO ---\n %0A%0Adef ma\n",
            "lines": "94"
        },
        {
            "label": "2025-10-03_02-51-28",
            "content": "class Towel:\n    def __init__(self, color: str, size: str):\n        self.color = color\n        self.size = size\n        self.wetness = 0 \n\n    def __str__(self) -> str:\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\n    def getMaxWetness(self) -> int:\n        if self.size == \"P\":\n            return 10\n        elif self.size == \"M\":\n            return 20\n        elif self.size == \"G\":\n            return 30\n        return 0\n\n    def isDry(self) -> str:\n        return \"sim\" if self.wetness == 0 else \"nao\"\n\n    def dry(self, amount: int) -> None:\n        max_wetness = self.getMaxWetness()\n        new_wetness = self.wetness + amount\n\n        if new_wetness >= max_wetness:\n            if self.wetness < max_wetness or amount > 0:\n                 print(\"toalha encharcada\")\n            \n            self.wetness = max_wetness\n            \n        else:\n            self.wetness = new_wetness\n    \n    def wringOut(self) -> None:\n        self.wetness = 0\n\n\n\ndef main():\n    towel = None\n    \n    try:\n        while True:\n            line = input()\n            line = line.strip()\n            \n            if not line:\n                continue\n\n            print(f\"${line}\")\n\n            parts = line.split()\n            if not parts:\n                continue\n                \n            cmd = parts[0]\n            \n            if cmd == \"criar\":\n                if len(parts) >= 3:\n                    color = parts[1]\n                    size = parts[2]\n                    towel = Towel(color, size)\n            \n            elif cmd == \"mostrar\":\n                if towel:\n                    print(towel)\n\n            elif cmd == \"seca\":\n                if towel:\n                    print(towel.isDry())\n\n            elif cmd == \"enxugar\":\n                if towel and len(parts) > 1:\n                    try:\n                        amount = int(parts[1])\n                        towel.dry(amount)\n                    except ValueError:\n                        pass\n            \n            elif cmd == \"torcer\":\n                if towel:\n                    towel.wringOut()\n            \n            elif cmd == \"end\":\n                break\n    except EOFError:\n        pass\n    except:\n        pass\n\nif __name__ == \"__main__\":\n    main()",
            "lines": "93"
        }
    ]
}